plugins {
	id 'maven-publish'
	alias libs.plugins.quilt.loom
}

def ENV = System.getenv()
def buildTime = ENV.BUILD_TIME ?: new Date().format('yyyyMMddHHmmss')

def javaVersion = 17

//TODO increment when updating the compendium
def book_version = 2

group = "dev.cammiescorner"
archivesBaseName = "arcanus-continuum"

boolean isPreviewBuild = !ENV.TAG || ENV.TAG.matches(".+-.+")
def buildNumber = !ENV.TAG ? ("${ENV.BUILD_NUMBER ? "build.${ENV.BUILD_NUMBER}" : buildTime}-${libs.versions.minecraft.get()}") : ""
version = (ENV.TAG ?: "development") + ((isPreviewBuild && !ENV.TAG) ? "+${buildNumber}" : "")

// messy workaround for bug in quilt loom 1.3.3
project.configurations.configureEach {
	exclude(group: "net.fabricmc", module: "fabric-loader")
	exclude(group: "net.fabricmc.fabric-api")
}

repositories {
	maven {
		name = "QuiltMC Snapshots"
		url = "https://maven.quiltmc.org/repository/snapshot"
	}
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		url = "https://maven.shedaniel.me"
	}
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com"
	}
	maven {
		name = "Ladysnake"
		url = "https://maven.ladysnake.org/releases"
	}
	maven {
		url = "https://maven.blamejared.com"
	}
	maven {
		url = "https://maven.kosmx.dev"
	}
	maven {
		url = "https://maven.jamieswhiteshirt.com/libs-release"
	}
	maven {
		url = "https://maven.uuid.gg/releases"
	}
	maven {
		url = "https://nexus.resourcefulbees.com/repository/maven-public/"
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		name = "CurseMaven"
		url = "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		name = "SonaType Snapshots"
		url = "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		name = 'Gegy'
		url = 'https://maven.gegy.dev'
	}
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
	}
}

dependencies {
	minecraft libs.minecraft

	mappings loom.layered() {
		officialMojangMappings()
		parchment "org.parchmentmc.data:parchment-${libs.versions.parchment.minecraft.get()}:${libs.versions.parchment.mappings.get()}@zip"
	}

	modImplementation libs.quilt.loader
	modImplementation libs.quilted.fabric.api
	modLocalRuntime(libs.quilted.fabric.api.deprecated) {
		exclude(group: "org.quiltmc", module: "quilt-loader")
	}

	modImplementation(libs.sparkweave) {
		exclude(group: "io.github.llamalad7")
	}

	modImplementation libs.bundles.cca

	modCompileOnly libs.patchouli
	modRuntimeOnly libs.patchouli

	modImplementation libs.smartbrainlib
	modImplementation libs.resourceful.config

	modImplementation libs.reach.attr
	include libs.reach.attr

	modImplementation libs.datasync.fabric
	include libs.datasync.fabric

	// first person model
	modCompileOnly libs.firstperson
//	modLocalRuntime libs.firstperson

	// sodium
	modCompileOnly libs.sodium
	modLocalRuntime libs.sodium

	// iris
	modCompileOnly libs.iris
	modLocalRuntime libs.iris

	// explosive enhancement
	modCompileOnly libs.explosive.enhancement
//	modLocalRuntime libs.explosive.enhancement

	// pehkui
	modCompileOnly libs.pehkui
	modLocalRuntime libs.bundles.pehkui.runtime

	// lambdynamiclights
	modCompileOnly libs.lambdynamiclights
	modLocalRuntime libs.bundles.lambdynamiclights.runtime

	// modmenu
	modImplementation libs.modmenu

	// emi
	modCompileOnly variantOf(libs.emi) { classifier 'api' }
	modLocalRuntime libs.emi

	// LazyDFU
	modLocalRuntime libs.lazydfu
}

loom {
	mods {
		"arcanuscontinuum" {
			// Tell Loom about each source set used by your mod here. This ensures that your mod's classes are properly transformed by Loader.
			sourceSet("main")
		}
	}

	accessWidenerPath.set(project.file("src/main/resources/arcanuscontinuum.accesswidener"))

	runs {
		client {
			ideConfigGenerated(true)
			runDir("run")

			if (project.hasProperty('mc_uuid')) {
				programArg("--uuid=${project.findProperty('mc_uuid')}")
			}

			if (project.hasProperty('mc_username')) {
				programArg("--username=${project.findProperty('mc_username')}")
			}

			if (project.hasProperty('mc_java_agent_path')) {
				vmArg("-javaagent:${project.findProperty('mc_java_agent_path')}")
			}
		}
	}
}

processResources {
	inputs.property "version", version
	inputs.property "book_version", book_version

	filesMatching("quilt.mod.json") {
		expand "version": version
	}
	filesMatching("**/patchouli_books/compendium_arcanus/book.json") {
		expand "book_version": book_version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release.set(javaVersion)
}

java {
	withSourcesJar()
	toolchain {
		languageVersion = JavaLanguageVersion.of(javaVersion)
	}
}

jar {
	from("LICENSE.md") {
		rename { "LICENSE_${archivesBaseName}.md" }
	}

	manifest.mainAttributes(
		"Implementation-Title": project.archivesBaseName,
		"Implementation-Version": project.version,
		"Maven-Artifact": "${project.group}:${project.archivesBaseName}:${project.version}".toLowerCase(Locale.ROOT),
		"Built-On-Minecraft": libs.versions.minecraft.get(),
		"Built-On-Java": "${System.getProperty("java.vm.version")} (${System.getProperty("java.vm.vendor")})"
	)
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {
		if (ENV.MAVEN_UPLOAD_URL) {
			maven {
				url = ENV.MAVEN_UPLOAD_URL
				credentials {
					username = ENV.MAVEN_UPLOAD_USERNAME
					password = ENV.MAVEN_UPLOAD_PASSWORD
				}
			}
		}
	}
}
